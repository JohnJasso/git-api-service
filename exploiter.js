const fetch = require('node-fetch');
const credentials = require('./credentials.json')
const baseURL =  'https://api.github.com/';

// Function that request a serach for repositories
async function searchRepos(search_term) {
    const url = new URL(`${baseURL}search/repositories?q=${search_term}`);
    try {
      const response = await fetch(url);
      const json = await response.json();
      return json;
    } catch (error) {
      console.log('Server error: ', error);
      return error;
    }
}

// Function that searchs a repository by its ID
async function searchRepoByID(id) {
  const url = new URL(`${baseURL}repositories/${id}`);
  try {
    const response = await fetch(url);
    const json = await response.json();
    return json;
  } catch (error) {
    console.log("Server error: ", error);
    return error;
  }
}

// Function that lists all stars of the user
async function listStars() {
    const url = new URL(`${baseURL}users/${credentials.username}/starred`);
    try {
      const response = await fetch(url);
      const json = await response.json();
      return json;
    } catch (error) {
      console.log("Server error: ", error);
      return error;
    }
}

// Function that lists all stars of the user by identification
async function listStarsAuth() {
  const url = new URL(`${baseURL}user/starred`);
  url.username = credentials.username;
  url.password = credentials.password;
  try {
    const response = await fetch(url);
    const json = await response.json();
    return json;
  } catch (error) {
    console.log("Server error: ", error);
    return error;
  }
}

// Function that stars a repository by identification
async function starRepoAuth(id) {
    const repo = await searchRepoByID(id);
    const repoName = await repo.full_name;
    const url = new URL(`${baseURL}user/starred/${repoName}`);
    url.username = credentials.username;
    url.password = credentials.password;
    try {
      const response = await fetch(url, {
        method: "PUT",
        headers: {
            'Content-Length': 0,
        }
      });
      const json = await response.json();
      return json;
    } catch (error) {
        //API receives PUT request without a body
        //Fetch function returns an error but the request is made correctly
      if(error.type === 'invalid-json') {
        return { status: 204, message: 'No Content'}
      }
      else{
        console.log('Server error: ', error)
        return error;
      }
    }
}

// Function that removes a starred repository by identification
async function removeStarRepoAuth(id) {
  const repo = await searchRepoByID(id);
  const repoName = await repo.full_name;
  const url = new URL(`${baseURL}user/starred/${repoName}`);
  url.username = credentials.username;
  url.password = credentials.password;
  try {
    const response = await fetch(url, {
      method: "DELETE",
      headers: {
        "Content-Length": 0,
      }
    });
    const json = await response.json();
    return json;
  } catch (error) {
    //Fetch function returns an error but the request is made correctly
    if (error.type === "invalid-json") {
      return { status: 204, message: "No Content" };
    } else {
      console.log("Server error: ", error);
      return error;
    }
  }
}

module.exports.search = searchRepos;
module.exports.searchID = searchRepoByID;
module.exports.list = listStars;
module.exports.listAuth = listStarsAuth;
module.exports.starAuth = starRepoAuth;
module.exports.remStarAuth = removeStarRepoAuth;